{"version":3,"sources":["components/AddContacts.js","components/ListContacts.js","components/DelContacts.js","components/EditContacts.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["AddContacts","state","redirect","addContact","newContact","imie","document","querySelector","value","nazwisko","email","telefon","localStorage","getItem","daneJSON","daneObj","JSON","parse","push","setItem","stringify","console","log","setState","this","to","className","type","name","onClick","Component","ListContacts","dane","scope","map","key","class","colspan","DelContacts","index","props","match","params","id","delContact","lista","splice","cancel","EditContacts","valueChange","event","target","editContact","onChange","Search","searchContact","nazwisko2","boolean","nazw","includes","getElementById","innerHTML","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dbb8b41d.chunk.js","sourcesContent":["import React, { Component} from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nclass AddContacts extends Component{\r\n\r\n    state = {\r\n        redirect : false\r\n    }\r\n\r\n    addContact = () =>{\r\n\r\n        let newContact = {\r\n\r\n            imie: document.querySelector(\"input[name='imie']\").value,\r\n            nazwisko: document.querySelector(\"input[name='nazwisko']\").value,\r\n            email: document.querySelector(\"input[name='email']\").value,\r\n            telefon: document.querySelector(\"input[name='telefon']\").value\r\n\r\n        }\r\n\r\n        if(localStorage.getItem(\"KTReact\")){\r\n            \r\n            let daneJSON = localStorage.getItem(\"KTReact\");\r\n            let daneObj = JSON.parse(daneJSON);\r\n            daneObj.push(newContact);\r\n            localStorage.setItem(\"KTReact\", JSON.stringify(daneObj));\r\n\r\n        }\r\n        else{\r\n            console.log(\"a\");\r\n            localStorage.setItem(\"KTReact\", JSON.stringify([newContact]));\r\n        }\r\n        this.setState({redirect:true});\r\n\r\n    }\r\n\r\n    \r\n    render(){\r\n\r\n        if(this.state.redirect === true){\r\n            return <Redirect to=\"/\" />\r\n        }\r\n\r\n      return(\r\n        \r\n            <div className=\"dodaj\">\r\n                <p>\r\n                    Imię:<br />\r\n                    <input type=\"text\" name=\"imie\"  />\r\n                </p>\r\n                <p>\r\n                    Nazwisko:<br />\r\n                    <input type=\"text\" name=\"nazwisko\" />\r\n                </p>\r\n                <p>\r\n                    Email:<br />\r\n                    <input type=\"text\" name=\"email\"  />\r\n                </p>\r\n                <p>\r\n                    Telefon:<br />\r\n                    <input type=\"text\" name=\"telefon\"  />\r\n                </p>\r\n                <button onClick={this.addContact}>Zapisz nowe Dane</button>\r\n                \r\n\r\n            </div>\r\n\r\n          \r\n        \r\n\r\n      );\r\n    }\r\n    \r\n\r\n\r\n}\r\n\r\nexport default AddContacts;\r\n\r\n","import React, { Component} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nclass ListContacts extends Component{\r\n    \r\n    state = {\r\n        dane : JSON.parse(localStorage.getItem(\"KTReact\"))\r\n\r\n    }\r\n\r\n   \r\n    \r\n    render(){\r\n      return(\r\n            \r\n            <div className=\"wyswietlanie\">\r\n                <table>\r\n                <tr>\r\n                    <th scope=\"col\"> </th>\r\n                    <th scope=\"col\">Imię</th>\r\n                    <th scope=\"col\">Nazwisko</th>\r\n                    <th scope=\"col\">Email</th>\r\n                    <th scope=\"col\">Telefon</th>\r\n                    \r\n                </tr>\r\n\r\n                {this.state.dane != null ? this.state.dane.map((value, key) =>\r\n                \r\n                <tr>\r\n                    <td scope=\"row\"></td>\r\n                    <td>{value.imie}</td>\r\n                    <td>{value.nazwisko}</td>\r\n                    <td>{value.email}</td>\r\n                    <td>{value.telefon}</td>\r\n                    <td><Link to={`/del/${key}`}><button class=\"button1\">Usuń kontakt</button></Link></td>\r\n                    <td><Link to={`/edit/${key}`}><button class=\"button2\">Edytuj kontakt</button></Link></td>\r\n                </tr>\r\n            \r\n            ) : <tr><td colspan=\"4\">Brak danych</td></tr>}\r\n\r\n\r\n            </table>\r\n               \r\n\r\n            </div>\r\n\r\n          \r\n        \r\n\r\n      );\r\n    }\r\n    \r\n\r\n\r\n}\r\n\r\nexport default ListContacts;\r\n\r\n","import React, { Component} from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\n\r\nclass DelContacts extends Component{\r\n    \r\n    state = {\r\n        redirect : false,\r\n        index : this.props.match.params.id,\r\n        dane : JSON.parse(localStorage.getItem(\"KTReact\"))\r\n    }\r\n\r\n    delContact = () =>{\r\n\r\n        let lista = this.state.dane;\r\n        lista.splice(this.state.index, 1);\r\n        this.setState({dane : lista});\r\n\r\n        localStorage.setItem(\"KTReact\", JSON.stringify(this.state.dane));\r\n        this.setState({redirect : true});\r\n\r\n    }\r\n    cancel = ()  => {\r\n        this.setState({redirect : true})\r\n    }\r\n\r\n    \r\n       \r\n    render(){\r\n        if(this.state.redirect === true){\r\n            return <Redirect to=\"/\" />\r\n        }\r\n     \r\n     \r\n        return(\r\n        \r\n            <div>\r\n                <p>Czy na pewno chcesz usunac kontakt?</p>\r\n                <button onClick={this.cancel}>Nie</button>\r\n                <button onClick={this.delContact}>Tak</button>\r\n              \r\n            </div>\r\n\r\n          \r\n        \r\n\r\n      );\r\n    }\r\n    \r\n\r\n\r\n}\r\n\r\nexport default DelContacts;\r\n\r\n","import React, { Component} from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\n\r\nclass EditContacts extends Component{\r\n\r\n    dane = JSON.parse(localStorage.getItem(\"KTReact\"));\r\n    index = this.props.match.params.id;\r\n\r\n    state = {\r\n        redirect : false,\r\n        imie : this.dane[this.index].imie,\r\n        nazwisko : this.dane[this.index].nazwisko,\r\n        email : this.dane[this.index].email,\r\n        telefon : this.dane[this.index].telefon,\r\n    }\r\n  valueChange = (event) =>{\r\n      this.setState({[event.target.name] : event.target.value })\r\n  }\r\n\r\n  editContact = () => {\r\n    let newContact = {\r\n        imie : this.state.imie,\r\n        nazwisko : this.state.nazwisko,\r\n        email : this.state.email,\r\n        telefon : this.state.telefon,\r\n    }\r\n    let daneJSON = localStorage.getItem(\"KTReact\");\r\n    let daneObj = JSON.parse(daneJSON);\r\n\r\n    daneObj[this.index] = newContact;\r\n    localStorage.setItem(\"KTReact\", JSON.stringify(daneObj))\r\n    this.setState({ redirect : true})\r\n\r\n  }\r\n    \r\n    render(){\r\n        if(this.state.redirect === true){\r\n            return <Redirect to=\"/\" />\r\n        }\r\n      return(\r\n        \r\n        <div>\r\n        <p>\r\n            Imię:<br />\r\n            <input type=\"text\" name=\"imie\" value={this.state.imie} onChange={this.valueChange} />\r\n        </p>\r\n        <p>\r\n            Nazwisko:<br />\r\n            <input type=\"text\" name=\"nazwisko\" value={this.state.nazwisko} onChange={this.valueChange} />\r\n        </p>\r\n        <p>\r\n            Email:<br />\r\n            <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.valueChange} />\r\n        </p>\r\n        <p>\r\n            Telefon:<br />\r\n            <input type=\"text\" name=\"telefon\" value={this.state.telefon} onChange={this.valueChange} />\r\n        </p>\r\n        <button onClick={this.editContact}>Edytuj dane</button>\r\n    </div>\r\n\r\n\r\n          \r\n        \r\n\r\n      );\r\n    }\r\n    \r\n\r\n\r\n}\r\n\r\nexport default EditContacts;\r\n\r\n","import React, { Component} from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\n\r\nclass Search extends Component{\r\n    \r\n\r\n    state = {\r\n        redirect : false,\r\n        dane : JSON.parse(localStorage.getItem(\"KTReact\")),\r\n        \r\n        \r\n    }\r\n    \r\n    searchContact = () => {\r\n        let nazwisko2; \r\n        nazwisko2 = document.querySelector(\"input[name='nazwisko']\").value;\r\n        \r\n        let nazwisko3 = this.state.dane.map(nazw => nazw.nazwisko);\r\n\r\n        var boolean = nazwisko3.includes(nazwisko2);\r\n       \r\n\r\n        if(boolean === true){\r\n            document.getElementById(\"found\").innerHTML = \"Znaleziono!\";\r\n        }\r\n        else{\r\n            document.getElementById(\"found\").innerHTML = \"Nie znaleziono takiego kontaktu!\";\r\n        }\r\n        \r\n\r\n        \r\n    }\r\n  \r\n    \r\n    render(){\r\n        if(this.state.redirect === true){\r\n            return <Redirect to=\"/\" />\r\n        }\r\n        return(\r\n                <div className=\"search\">\r\n                    \r\n\r\n\r\n                    <p>Podaj nazwisko: </p>\r\n                    <input type=\"text\" name=\"nazwisko\" />\r\n                    <button onClick={this.searchContact}>Znajdź!</button>\r\n                    <div class = \"box\"><p id=\"found\"></p></div>\r\n                   \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n            \r\n            \r\n                    \r\n\r\n                </div>\r\n                \r\n                \r\n        );\r\n      \r\n    }\r\n    \r\n\r\n\r\n}\r\n\r\nexport default Search;\r\n\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport AddContacts from \"./components/AddContacts\"\nimport ListContacts from \"./components/ListContacts\"\nimport DelContacts from \"./components/DelContacts\"\nimport EditContacts from \"./components/EditContacts\"\nimport Search from \"./components/Search\"\n\n\n\nimport  \"./App.css\"\n\nclass App extends Component{\n\n  render(){\n\n    return(\n\n      <div className=\"stronaGlowna\">\n        \n          <h1>Książka Telefoniczna</h1> \n          \n          <div class=\"box4\"></div>\n          <div class=\"box5\"></div>\n          <div class=\"box6\"></div>\n         \n          \n        \n        <BrowserRouter>\n\n          \n            \n        <div class=\"topnav\">\n              <Link to=\"/\">Lista kontaktów</Link>\n            \n              <Link to=\"/add\">Dodaj nowy kontakt</Link>\n            \n              <Link to=\"/search\">Wyszukaj kontakt</Link>\n         </div>   \n        \n          <Switch>\n            <Route exact path=\"/\" component={ListContacts} />\n            <Route path=\"/add\" component={AddContacts} />\n            <Route path=\"/del/:id\" component={DelContacts} />\n            <Route path=\"/edit/:id\" component={EditContacts} />\n            <Route path=\"/search\" component={Search} />\n          </Switch>\n          \n        </BrowserRouter>\n        \n\n      </div>\n\n    );\n\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}